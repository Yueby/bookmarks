"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vue_1 = require("vue");
const utils_1 = require("../../utils");
const validation_1 = require("../../utils/validation");
/**
 * 分组管理器组件
 */
exports.default = (0, vue_1.defineComponent)({
    name: 'GroupManager',
    props: {
        groups: {
            type: Array,
            required: true
        },
        currentGroup: {
            type: Object,
            default: null
        }
    },
    emits: ['update:groups', 'update:currentGroup'],
    data() {
        return {
            showInput: false,
            newGroupName: '',
            dragState: '',
            dragIndex: -1
        };
    },
    computed: {
        sortedGroups() {
            return [...this.groups].sort((a, b) => a.order - b.order);
        }
    },
    methods: {
        /**
         * 添加分组
         */
        addGroup() {
            if (!this.newGroupName)
                return;
            if (!(0, validation_1.validateGroupName)(this.newGroupName)) {
                Editor.Dialog.warn('分组名称不能为空且长度不能超过20个字符');
                return;
            }
            const group = {
                id: (0, utils_1.generateId)(),
                name: this.newGroupName,
                bookmarkList: [],
                order: this.groups.length,
                createTime: Date.now(),
                updateTime: Date.now()
            };
            const newGroups = [...this.groups, group];
            this.$emit('update:groups', newGroups);
            this.newGroupName = '';
            this.showInput = false;
        },
        /**
         * 删除分组
         */
        removeGroup(group) {
            var _a;
            const newGroups = this.groups.filter(g => g.id !== group.id);
            this.$emit('update:groups', newGroups);
            if (((_a = this.currentGroup) === null || _a === void 0 ? void 0 : _a.id) === group.id) {
                this.$emit('update:currentGroup', null);
            }
        },
        /**
         * 切换分组
         */
        switchGroup(group) {
            this.$emit('update:currentGroup', group);
        },
        /**
         * 开始拖拽分组
         */
        dragStartGroup(event, group) {
            if (!event.dataTransfer)
                return;
            event.dataTransfer.setData('group-id', group.id);
            event.dataTransfer.effectAllowed = 'move';
            const target = event.target;
            target.classList.add('dragging');
            this.dragState = 'group';
            this.dragIndex = this.groups.findIndex(g => g.id === group.id);
        },
        /**
         * 拖拽结束
         */
        dragEndGroup(event) {
            const target = event.target;
            target.classList.remove('dragging');
            this.dragState = '';
            this.dragIndex = -1;
        },
        /**
         * 处理拖拽放置
         */
        async dropGroup(event, targetGroup) {
            event.preventDefault();
            if (!event.dataTransfer)
                return;
            try {
                const sourceId = event.dataTransfer.getData('group-id');
                if (!sourceId || sourceId === targetGroup.id)
                    return;
                const sourceIndex = this.groups.findIndex(g => g.id === sourceId);
                const targetIndex = this.groups.findIndex(g => g.id === targetGroup.id);
                if (sourceIndex > -1 && targetIndex > -1) {
                    const newGroups = [...this.groups];
                    const [movedGroup] = newGroups.splice(sourceIndex, 1);
                    newGroups.splice(targetIndex, 0, movedGroup);
                    // 更新排序
                    newGroups.forEach((group, index) => {
                        group.order = index;
                    });
                    this.$emit('update:groups', newGroups);
                }
            }
            catch (err) {
                (0, utils_1.handleError)(err, '移动分组失败');
            }
        }
    }
});
//# sourceMappingURL=data:application/json;base64,