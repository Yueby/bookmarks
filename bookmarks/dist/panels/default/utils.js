"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNodePath = exports.getAssetIcon = exports.validateAdditionalItems = exports.validateAdditionalItem = exports.createAdditionalItem = exports.validateGroup = exports.validateMark = exports.findMarkInGroups = exports.findGroupById = exports.sortGroups = exports.normalizePath = exports.isImageFile = exports.isMarkItem = exports.isGroup = exports.deepClone = exports.sortByOrder = exports.validateGroupName = exports.formatDate = exports.handleError = exports.generateId = exports.debounce = void 0;
const types_1 = require("../shared/types");
const icons_1 = require("../shared/constants/icons");
function debounce(fn, delay) {
    let timer = null;
    return function (...args) {
        if (timer)
            clearTimeout(timer);
        timer = setTimeout(() => {
            fn.apply(this, args);
            timer = null;
        }, delay);
    };
}
exports.debounce = debounce;
function generateId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
}
exports.generateId = generateId;
function handleError(error, message) {
    console.error(message, error);
    Editor.Dialog.error('错误', {
        detail: message + '\n' + (error.message || error)
    });
}
exports.handleError = handleError;
function formatDate(timestamp) {
    return new Date(timestamp).toLocaleString();
}
exports.formatDate = formatDate;
function validateGroupName(name) {
    return name.trim().length > 0 && name.length <= 20;
}
exports.validateGroupName = validateGroupName;
function sortByOrder(items) {
    return [...items].sort((a, b) => a.order - b.order);
}
exports.sortByOrder = sortByOrder;
function deepClone(obj) {
    return JSON.parse(JSON.stringify(obj));
}
exports.deepClone = deepClone;
function isGroup(obj) {
    return obj && typeof obj === 'object' && typeof obj.id === 'string' && typeof obj.name === 'string' && Array.isArray(obj.bookmarkList);
}
exports.isGroup = isGroup;
function isMarkItem(obj) {
    return obj && typeof obj === 'object' && typeof obj.name === 'string' && typeof obj.uuid === 'string';
}
exports.isMarkItem = isMarkItem;
function isImageFile(extname) {
    return ['png', 'jpg', 'jpeg'].includes(extname.toLowerCase());
}
exports.isImageFile = isImageFile;
function normalizePath(path) {
    return path.replace(/\\/g, '/');
}
exports.normalizePath = normalizePath;
function sortGroups(groups, order = types_1.SortOrder.ASC) {
    return [...groups].sort((a, b) => {
        const result = a.order - b.order;
        return order === types_1.SortOrder.ASC ? result : -result;
    });
}
exports.sortGroups = sortGroups;
function findGroupById(groups, id) {
    return groups.find((group) => group.id === id);
}
exports.findGroupById = findGroupById;
function findMarkInGroups(groups, uuid) {
    for (const group of groups) {
        const mark = group.bookmarkList.find((item) => item.uuid === uuid);
        if (mark) {
            return { group, mark };
        }
    }
    return undefined;
}
exports.findMarkInGroups = findMarkInGroups;
function validateMark(mark) {
    return typeof mark === 'object' && typeof mark.name === 'string' && typeof mark.uuid === 'string' && typeof mark.assetType === 'string';
}
exports.validateMark = validateMark;
function validateGroup(group) {
    return (typeof group === 'object' && typeof group.id === 'string' && typeof group.name === 'string' && Array.isArray(group.bookmarkList) && group.bookmarkList.every(validateMark));
}
exports.validateGroup = validateGroup;
function createAdditionalItem(type, value, name) {
    return { type, value, name };
}
exports.createAdditionalItem = createAdditionalItem;
function validateAdditionalItem(item) {
    return item && typeof item === 'object' && typeof item.type === 'string' && typeof item.value === 'string' && typeof item.name === 'string';
}
exports.validateAdditionalItem = validateAdditionalItem;
function validateAdditionalItems(items) {
    return Array.isArray(items) && items.every(validateAdditionalItem);
}
exports.validateAdditionalItems = validateAdditionalItems;
// 获取资源图标
function getAssetIcon(extName, type) {
    // 先尝试从扩展名映射获取
    const extIcon = icons_1.extMap[extName];
    if (extIcon) {
        return extIcon;
    }
    // 再尝试从类型映射获取
    const typeIcon = icons_1.typeMap[type];
    if (typeIcon) {
        return typeIcon;
    }
    // 如果都没有找到，返回默认图标
    return 'custom-asset';
}
exports.getAssetIcon = getAssetIcon;
// 获取节点路径
async function getNodePath(uuid) {
    var _a;
    const paths = [];
    let currentUuid = uuid;
    while (currentUuid) {
        const nodeInfo = await Editor.Message.request('scene', 'query-node', currentUuid);
        if (!nodeInfo)
            break;
        const nodeName = ((_a = nodeInfo.name) === null || _a === void 0 ? void 0 : _a.value) || 'Unknown';
        paths.unshift(nodeName);
        currentUuid = nodeInfo.parent || '';
    }
    return paths.join('/');
}
exports.getNodePath = getNodePath;
//# sourceMappingURL=data:application/json;base64,